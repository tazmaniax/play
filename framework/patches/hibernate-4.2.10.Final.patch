diff --git a/hibernate-core/src/main/java/org/hibernate/EmptyInterceptor.java b/hibernate-core/src/main/java/org/hibernate/EmptyInterceptor.java
index b3e0dc5..41023c6 100755
--- a/hibernate-core/src/main/java/org/hibernate/EmptyInterceptor.java
+++ b/hibernate-core/src/main/java/org/hibernate/EmptyInterceptor.java
@@ -111,10 +111,10 @@
 		return sql;
 	}
 
-	public void onCollectionRemove(Object collection, Serializable key) throws CallbackException {}
+	public boolean onCollectionRemove(Object collection, Serializable key) throws CallbackException { return false; }
 
-	public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException {}
+	public boolean onCollectionRecreate(Object collection, Serializable key) throws CallbackException { return false; }
 
-	public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException {}
+	public boolean onCollectionUpdate(Object collection, Serializable key) throws CallbackException { return false; }
 	
 }
\ No newline at end of file
diff --git a/hibernate-core/src/main/java/org/hibernate/Interceptor.java b/hibernate-core/src/main/java/org/hibernate/Interceptor.java
index 7664c36..f935942 100644
--- a/hibernate-core/src/main/java/org/hibernate/Interceptor.java
+++ b/hibernate-core/src/main/java/org/hibernate/Interceptor.java
@@ -132,7 +132,7 @@
 	 *
 	 * @throws CallbackException Thrown if the interceptor encounters any problems handling the callback.
 	 */
-	public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException;
+	public boolean onCollectionRecreate(Object collection, Serializable key) throws CallbackException;
 
 	/**
 	 * Called before a collection is deleted.
@@ -142,7 +142,7 @@
 	 *
 	 * @throws CallbackException Thrown if the interceptor encounters any problems handling the callback.
 	 */
-	public void onCollectionRemove(Object collection, Serializable key) throws CallbackException;
+	public boolean onCollectionRemove(Object collection, Serializable key) throws CallbackException;
 
 	/**
 	 * Called before a collection is updated.
@@ -152,7 +152,7 @@
 	 *
 	 * @throws CallbackException Thrown if the interceptor encounters any problems handling the callback.
 	 */
-	public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException;
+	public boolean onCollectionUpdate(Object collection, Serializable key) throws CallbackException;
 
 	/**
 	 * Called before a flush
diff --git a/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java b/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java
index 604803a..c85c362 100644
--- a/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java
+++ b/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java
@@ -152,6 +152,27 @@
 //		for ( Map.Entry me : IdentityMap.concurrentEntries( persistenceContext.getEntityEntries() ) ) {
 			EntityEntry entry = (EntityEntry) me.getValue();
 			Status status = entry.getStatus();
+			
+			// This entity will be saved?
+			boolean willBeSaved = true;
+			try {
+				Object o = me.getKey();
+				Class c = o.getClass();
+				Class jpaBase = Class.forName("play.db.jpa.JPABase");
+				while(!c.equals(Object.class)) {
+					if(c.equals(jpaBase)) {
+						willBeSaved = (Boolean)(jpaBase.getDeclaredField("willBeSaved").get(o));
+						break;
+					}
+					c = c.getSuperclass();
+				}
+				if(!willBeSaved) {
+					continue;
+				}
+			} catch(Exception e) {
+				e.printStackTrace();
+			}
+			
 			if ( status == Status.MANAGED || status == Status.SAVING || status == Status.READ_ONLY ) {
 				cascadeOnFlush( session, entry.getPersister(), me.getKey(), anything );
 			}
@@ -269,39 +290,42 @@
 			CollectionEntry ce = me.getValue();
 
 			if ( ce.isDorecreate() ) {
-				session.getInterceptor().onCollectionRecreate( coll, ce.getCurrentKey() );
-				actionQueue.addAction(
-						new CollectionRecreateAction(
-								coll,
-								ce.getCurrentPersister(),
-								ce.getCurrentKey(),
-								session
-							)
-					);
+				if ( session.getInterceptor().onCollectionRecreate( coll, ce.getCurrentKey() ) ) {;
+					actionQueue.addAction(
+							new CollectionRecreateAction(
+									coll,
+									ce.getCurrentPersister(),
+									ce.getCurrentKey(),
+									session
+								)
+						);
+				}
 			}
 			if ( ce.isDoremove() ) {
-				session.getInterceptor().onCollectionRemove( coll, ce.getLoadedKey() );
-				actionQueue.addAction(
-						new CollectionRemoveAction(
-								coll,
-								ce.getLoadedPersister(),
-								ce.getLoadedKey(),
-								ce.isSnapshotEmpty(coll),
-								session
-							)
-					);
+				if ( session.getInterceptor().onCollectionRemove( coll, ce.getLoadedKey() ) ) {;
+					actionQueue.addAction(
+							new CollectionRemoveAction(
+									coll,
+									ce.getLoadedPersister(),
+									ce.getLoadedKey(),
+									ce.isSnapshotEmpty(coll),
+									session
+								)
+						);
+				}
 			}
 			if ( ce.isDoupdate() ) {
-				session.getInterceptor().onCollectionUpdate( coll, ce.getLoadedKey() );
-				actionQueue.addAction(
-						new CollectionUpdateAction(
-								coll,
-								ce.getLoadedPersister(),
-								ce.getLoadedKey(),
-								ce.isSnapshotEmpty(coll),
-								session
-							)
-					);
+				if ( session.getInterceptor().onCollectionUpdate( coll, ce.getLoadedKey() ) ) {;
+					actionQueue.addAction(
+							new CollectionUpdateAction(
+									coll,
+									ce.getLoadedPersister(),
+									ce.getLoadedKey(),
+									ce.isSnapshotEmpty(coll),
+									session
+								)
+						);
+				}
 			}
 			if ( !coll.wasInitialized() && coll.hasQueuedOperations() ) {
 				actionQueue.addAction(
diff --git a/hibernate-core/src/test/java/org/hibernate/metamodel/source/internal/SessionFactoryBuilderImplTest.java b/hibernate-core/src/test/java/org/hibernate/metamodel/source/internal/SessionFactoryBuilderImplTest.java
index b32dfa9..58b774f 100644
--- a/hibernate-core/src/test/java/org/hibernate/metamodel/source/internal/SessionFactoryBuilderImplTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/metamodel/source/internal/SessionFactoryBuilderImplTest.java
@@ -122,18 +122,21 @@
 		}
 
 		@Override
-		public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
+		public boolean onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
 			INSTANCE.onCollectionRecreate( collection, key );
+			return true;
 		}
 
 		@Override
-		public void onCollectionRemove(Object collection, Serializable key) throws CallbackException {
+		public boolean onCollectionRemove(Object collection, Serializable key) throws CallbackException {
 			INSTANCE.onCollectionRemove( collection, key );
+			return true;
 		}
 
 		@Override
-		public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
+		public boolean onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
 			INSTANCE.onCollectionUpdate( collection, key );
+			return true;
 		}
 
 		@Override
diff --git a/hibernate-core/src/test/java/org/hibernate/test/interfaceproxy/DocumentInterceptor.java b/hibernate-core/src/test/java/org/hibernate/test/interfaceproxy/DocumentInterceptor.java
index 3455384..732c812 100755
--- a/hibernate-core/src/test/java/org/hibernate/test/interfaceproxy/DocumentInterceptor.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/interfaceproxy/DocumentInterceptor.java
@@ -88,7 +88,7 @@
 		return sql;
 	}
 
-	public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException {}
-	public void onCollectionRemove(Object collection, Serializable key) throws CallbackException {}
-	public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException {}
+	public boolean onCollectionRecreate(Object collection, Serializable key) throws CallbackException { return true; }
+	public boolean onCollectionRemove(Object collection, Serializable key) throws CallbackException { return true; }
+	public boolean onCollectionUpdate(Object collection, Serializable key) throws CallbackException { return true; }
 }
diff --git a/hibernate-core/src/test/java/org/hibernate/test/mixed/DocumentInterceptor.java b/hibernate-core/src/test/java/org/hibernate/test/mixed/DocumentInterceptor.java
index d781826..7931de7 100755
--- a/hibernate-core/src/test/java/org/hibernate/test/mixed/DocumentInterceptor.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/mixed/DocumentInterceptor.java
@@ -104,13 +104,16 @@
 		return sql;
 	}
 
-	public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
+	public boolean onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
+		return true;
 	}
 
-	public void onCollectionRemove(Object collection, Serializable key) throws CallbackException {
+	public boolean onCollectionRemove(Object collection, Serializable key) throws CallbackException {
+		return true;
 	}
 
-	public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
+	public boolean onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
+		return true;
 	}
 
 }